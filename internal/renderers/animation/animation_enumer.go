// Code generated by "enumer -type=Animation -transform=kebab"; DO NOT EDIT.

package animation

import (
	"fmt"
	"strings"
)

const _AnimationName = "aurorablobby-fusioncheckerboardcolor-wavefireflykaleidoscopelava-lamplightningmandelbrotmatrix-rainnebulaplasmaradar-sweepripplespectrumspiralstarfieldtunnelvortexpixel-bloomrgb-flowglitchhypnotic-ringsspinning-gridhex-pulsesnake-trailexplosion-burstbeat-gridaudio-orbitaurora-curtainsulam-spiralgame-of-lifevector-field-flowsierpinski-trianglefluid-dreamfluid-rainboworbiting-metaballsmarble-shader"

var _AnimationIndex = [...]uint16{0, 6, 19, 31, 41, 48, 60, 69, 78, 88, 99, 105, 111, 122, 128, 136, 142, 151, 157, 163, 174, 182, 188, 202, 215, 224, 235, 250, 259, 270, 285, 296, 308, 325, 344, 355, 368, 386, 399}

const _AnimationLowerName = "aurorablobby-fusioncheckerboardcolor-wavefireflykaleidoscopelava-lamplightningmandelbrotmatrix-rainnebulaplasmaradar-sweepripplespectrumspiralstarfieldtunnelvortexpixel-bloomrgb-flowglitchhypnotic-ringsspinning-gridhex-pulsesnake-trailexplosion-burstbeat-gridaudio-orbitaurora-curtainsulam-spiralgame-of-lifevector-field-flowsierpinski-trianglefluid-dreamfluid-rainboworbiting-metaballsmarble-shader"

func (i Animation) String() string {
	if i < 0 || i >= Animation(len(_AnimationIndex)-1) {
		return fmt.Sprintf("Animation(%d)", i)
	}
	return _AnimationName[_AnimationIndex[i]:_AnimationIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AnimationNoOp() {
	var x [1]struct{}
	_ = x[Aurora-(0)]
	_ = x[BlobbyFusion-(1)]
	_ = x[Checkerboard-(2)]
	_ = x[ColorWave-(3)]
	_ = x[Firefly-(4)]
	_ = x[Kaleidoscope-(5)]
	_ = x[LavaLamp-(6)]
	_ = x[Lightning-(7)]
	_ = x[Mandelbrot-(8)]
	_ = x[MatrixRain-(9)]
	_ = x[Nebula-(10)]
	_ = x[Plasma-(11)]
	_ = x[RadarSweep-(12)]
	_ = x[Ripple-(13)]
	_ = x[Spectrum-(14)]
	_ = x[Spiral-(15)]
	_ = x[Starfield-(16)]
	_ = x[Tunnel-(17)]
	_ = x[Vortex-(18)]
	_ = x[PixelBloom-(19)]
	_ = x[RGBFlow-(20)]
	_ = x[Glitch-(21)]
	_ = x[HypnoticRings-(22)]
	_ = x[SpinningGrid-(23)]
	_ = x[HexPulse-(24)]
	_ = x[SnakeTrail-(25)]
	_ = x[ExplosionBurst-(26)]
	_ = x[BeatGrid-(27)]
	_ = x[AudioOrbit-(28)]
	_ = x[AuroraCurtains-(29)]
	_ = x[UlamSpiral-(30)]
	_ = x[GameOfLife-(31)]
	_ = x[VectorFieldFlow-(32)]
	_ = x[SierpinskiTriangle-(33)]
	_ = x[FluidDream-(34)]
	_ = x[FluidRainbow-(35)]
	_ = x[OrbitingMetaballs-(36)]
	_ = x[MarbleShader-(37)]
}

var _AnimationValues = []Animation{Aurora, BlobbyFusion, Checkerboard, ColorWave, Firefly, Kaleidoscope, LavaLamp, Lightning, Mandelbrot, MatrixRain, Nebula, Plasma, RadarSweep, Ripple, Spectrum, Spiral, Starfield, Tunnel, Vortex, PixelBloom, RGBFlow, Glitch, HypnoticRings, SpinningGrid, HexPulse, SnakeTrail, ExplosionBurst, BeatGrid, AudioOrbit, AuroraCurtains, UlamSpiral, GameOfLife, VectorFieldFlow, SierpinskiTriangle, FluidDream, FluidRainbow, OrbitingMetaballs, MarbleShader}

var _AnimationNameToValueMap = map[string]Animation{
	_AnimationName[0:6]:          Aurora,
	_AnimationLowerName[0:6]:     Aurora,
	_AnimationName[6:19]:         BlobbyFusion,
	_AnimationLowerName[6:19]:    BlobbyFusion,
	_AnimationName[19:31]:        Checkerboard,
	_AnimationLowerName[19:31]:   Checkerboard,
	_AnimationName[31:41]:        ColorWave,
	_AnimationLowerName[31:41]:   ColorWave,
	_AnimationName[41:48]:        Firefly,
	_AnimationLowerName[41:48]:   Firefly,
	_AnimationName[48:60]:        Kaleidoscope,
	_AnimationLowerName[48:60]:   Kaleidoscope,
	_AnimationName[60:69]:        LavaLamp,
	_AnimationLowerName[60:69]:   LavaLamp,
	_AnimationName[69:78]:        Lightning,
	_AnimationLowerName[69:78]:   Lightning,
	_AnimationName[78:88]:        Mandelbrot,
	_AnimationLowerName[78:88]:   Mandelbrot,
	_AnimationName[88:99]:        MatrixRain,
	_AnimationLowerName[88:99]:   MatrixRain,
	_AnimationName[99:105]:       Nebula,
	_AnimationLowerName[99:105]:  Nebula,
	_AnimationName[105:111]:      Plasma,
	_AnimationLowerName[105:111]: Plasma,
	_AnimationName[111:122]:      RadarSweep,
	_AnimationLowerName[111:122]: RadarSweep,
	_AnimationName[122:128]:      Ripple,
	_AnimationLowerName[122:128]: Ripple,
	_AnimationName[128:136]:      Spectrum,
	_AnimationLowerName[128:136]: Spectrum,
	_AnimationName[136:142]:      Spiral,
	_AnimationLowerName[136:142]: Spiral,
	_AnimationName[142:151]:      Starfield,
	_AnimationLowerName[142:151]: Starfield,
	_AnimationName[151:157]:      Tunnel,
	_AnimationLowerName[151:157]: Tunnel,
	_AnimationName[157:163]:      Vortex,
	_AnimationLowerName[157:163]: Vortex,
	_AnimationName[163:174]:      PixelBloom,
	_AnimationLowerName[163:174]: PixelBloom,
	_AnimationName[174:182]:      RGBFlow,
	_AnimationLowerName[174:182]: RGBFlow,
	_AnimationName[182:188]:      Glitch,
	_AnimationLowerName[182:188]: Glitch,
	_AnimationName[188:202]:      HypnoticRings,
	_AnimationLowerName[188:202]: HypnoticRings,
	_AnimationName[202:215]:      SpinningGrid,
	_AnimationLowerName[202:215]: SpinningGrid,
	_AnimationName[215:224]:      HexPulse,
	_AnimationLowerName[215:224]: HexPulse,
	_AnimationName[224:235]:      SnakeTrail,
	_AnimationLowerName[224:235]: SnakeTrail,
	_AnimationName[235:250]:      ExplosionBurst,
	_AnimationLowerName[235:250]: ExplosionBurst,
	_AnimationName[250:259]:      BeatGrid,
	_AnimationLowerName[250:259]: BeatGrid,
	_AnimationName[259:270]:      AudioOrbit,
	_AnimationLowerName[259:270]: AudioOrbit,
	_AnimationName[270:285]:      AuroraCurtains,
	_AnimationLowerName[270:285]: AuroraCurtains,
	_AnimationName[285:296]:      UlamSpiral,
	_AnimationLowerName[285:296]: UlamSpiral,
	_AnimationName[296:308]:      GameOfLife,
	_AnimationLowerName[296:308]: GameOfLife,
	_AnimationName[308:325]:      VectorFieldFlow,
	_AnimationLowerName[308:325]: VectorFieldFlow,
	_AnimationName[325:344]:      SierpinskiTriangle,
	_AnimationLowerName[325:344]: SierpinskiTriangle,
	_AnimationName[344:355]:      FluidDream,
	_AnimationLowerName[344:355]: FluidDream,
	_AnimationName[355:368]:      FluidRainbow,
	_AnimationLowerName[355:368]: FluidRainbow,
	_AnimationName[368:386]:      OrbitingMetaballs,
	_AnimationLowerName[368:386]: OrbitingMetaballs,
	_AnimationName[386:399]:      MarbleShader,
	_AnimationLowerName[386:399]: MarbleShader,
}

var _AnimationNames = []string{
	_AnimationName[0:6],
	_AnimationName[6:19],
	_AnimationName[19:31],
	_AnimationName[31:41],
	_AnimationName[41:48],
	_AnimationName[48:60],
	_AnimationName[60:69],
	_AnimationName[69:78],
	_AnimationName[78:88],
	_AnimationName[88:99],
	_AnimationName[99:105],
	_AnimationName[105:111],
	_AnimationName[111:122],
	_AnimationName[122:128],
	_AnimationName[128:136],
	_AnimationName[136:142],
	_AnimationName[142:151],
	_AnimationName[151:157],
	_AnimationName[157:163],
	_AnimationName[163:174],
	_AnimationName[174:182],
	_AnimationName[182:188],
	_AnimationName[188:202],
	_AnimationName[202:215],
	_AnimationName[215:224],
	_AnimationName[224:235],
	_AnimationName[235:250],
	_AnimationName[250:259],
	_AnimationName[259:270],
	_AnimationName[270:285],
	_AnimationName[285:296],
	_AnimationName[296:308],
	_AnimationName[308:325],
	_AnimationName[325:344],
	_AnimationName[344:355],
	_AnimationName[355:368],
	_AnimationName[368:386],
	_AnimationName[386:399],
}

// AnimationString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AnimationString(s string) (Animation, error) {
	if val, ok := _AnimationNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AnimationNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Animation values", s)
}

// AnimationValues returns all values of the enum
func AnimationValues() []Animation {
	return _AnimationValues
}

// AnimationStrings returns a slice of all String values of the enum
func AnimationStrings() []string {
	strs := make([]string, len(_AnimationNames))
	copy(strs, _AnimationNames)
	return strs
}

// IsAAnimation returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Animation) IsAAnimation() bool {
	for _, v := range _AnimationValues {
		if i == v {
			return true
		}
	}
	return false
}
