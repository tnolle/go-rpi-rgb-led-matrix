// Code generated by "enumer -type=Dashboard -transform=kebab"; DO NOT EDIT.

package dashboard

import (
	"fmt"
	"strings"
)

const _DashboardName = "clockautodartsshopify"

var _DashboardIndex = [...]uint8{0, 5, 14, 21}

const _DashboardLowerName = "clockautodartsshopify"

func (i Dashboard) String() string {
	if i < 0 || i >= Dashboard(len(_DashboardIndex)-1) {
		return fmt.Sprintf("Dashboard(%d)", i)
	}
	return _DashboardName[_DashboardIndex[i]:_DashboardIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DashboardNoOp() {
	var x [1]struct{}
	_ = x[Clock-(0)]
	_ = x[Autodarts-(1)]
	_ = x[Shopify-(2)]
}

var _DashboardValues = []Dashboard{Clock, Autodarts, Shopify}

var _DashboardNameToValueMap = map[string]Dashboard{
	_DashboardName[0:5]:        Clock,
	_DashboardLowerName[0:5]:   Clock,
	_DashboardName[5:14]:       Autodarts,
	_DashboardLowerName[5:14]:  Autodarts,
	_DashboardName[14:21]:      Shopify,
	_DashboardLowerName[14:21]: Shopify,
}

var _DashboardNames = []string{
	_DashboardName[0:5],
	_DashboardName[5:14],
	_DashboardName[14:21],
}

// DashboardString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DashboardString(s string) (Dashboard, error) {
	if val, ok := _DashboardNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DashboardNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Dashboard values", s)
}

// DashboardValues returns all values of the enum
func DashboardValues() []Dashboard {
	return _DashboardValues
}

// DashboardStrings returns a slice of all String values of the enum
func DashboardStrings() []string {
	strs := make([]string, len(_DashboardNames))
	copy(strs, _DashboardNames)
	return strs
}

// IsADashboard returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Dashboard) IsADashboard() bool {
	for _, v := range _DashboardValues {
		if i == v {
			return true
		}
	}
	return false
}
